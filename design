// Code your design here
module digital_clock(
    input clk,
    input rst_n,
    output [6:0] seg,
    output [3:0] an
);

reg [25:0] counter;
wire clk_1hz;

always @(posedge clk or negedge rst_n) begin
    if (~rst_n) begin
        counter <= 26'd0;
    end else if (counter == 26'd49_999_999) begin
        counter <= 26'd0;
    end else begin
        counter <= counter + 26'd1;
    end
end

assign clk_1hz = (counter < 26'd24_999_999) ? 1'b1 : 1'b0;

reg [5:0] seconds;
reg [5:0] minutes;
reg [4:0] hours;

always @(posedge clk_1hz or negedge rst_n) begin
    if (~rst_n) begin
        seconds <= 6'd0;
        minutes <= 6'd0;
        hours <= 5'd0;
    end else begin
        if (seconds == 6'd59) begin
            seconds <= 6'd0;
            if (minutes == 6'd59) begin
                minutes <= 6'd0;
                if (hours == 5'd23) begin
                    hours <= 5'd0;
                end else begin
                    hours <= hours + 5'd1;
                end
            end else begin
                minutes <= minutes + 6'd1;
            end
        end else begin
            seconds <= seconds + 6'd1;
        end
    end
end

reg [3:0] digit;
reg [19:0] refresh_counter;

always @(posedge clk or negedge rst_n) begin
    if (~rst_n) begin
        refresh_counter <= 20'd0;
    end else begin
        refresh_counter <= refresh_counter + 20'd1;
    end
end

always @(posedge clk or negedge rst_n) begin
    if (~rst_n) begin
        digit <= 4'd0;
    end else if (refresh_counter == 20'd49999) begin
        refresh_counter <= 20'd0;
        digit <= digit + 4'd1;
    end
end

reg [6:0] seg_out;

always @(posedge clk or negedge rst_n) begin
    case (digit)
        4'd0: begin
            an = 4'b1110;
            seg_out = get_segment(seconds % 10);
        end
        4'd1: begin
            an = 4'b1101;
            seg_out = get_segment(seconds / 10);
        end
        4'd2: begin
            an = 4'b1011;
            seg_out = get_segment(minutes % 10);
        end
        4'd3: begin
            an = 4'b0111;
            seg_out = get_segment(minutes / 10);
        end
        default: begin
            an = 4'b1111;
            seg_out = 7'b1111111;
        end
    endcase
end

function [6:0] get_segment;
    input [3:0] digit;
    case (digit)
        4'd0: get_segment = 7'b1000000;
        4'd1: get_segment = 7'b1111001;
        4'd2: get_segment = 7'b0100100;
        4'd3: get_segment = 7'b0110000;
        4'd4: get_segment = 7'b0011001;
        4'd5: get_segment = 7'b0010010;
        4'd6: get_segment = 7'b0000010;
        4'd7: get_segment = 7'b1111000;
        4'd8: get_segment = 7'b0000000;
        4'd9: get_segment = 7'b0010000;
        default: get_segment = 7'b1111111;
    endcase
endfunction

assign seg = seg_out;
assign an = ~an;

endmodule
